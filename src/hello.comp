#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1024
#define HEIGHT (1024*2)
#define WORKGROUP_SIZE 256

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, set=0, binding=0) buffer src0 { uint a[]; };
layout(std430, set=0, binding=1) buffer src1 { uint b[]; };
layout(std430, set=0, binding=2) buffer dst  { uint c[]; };


#define MAD_4(x, y)     x = fma(y, x, y);   y = fma(x, y, x);   x = fma(y, x, y);   y = fma(x, y, x);
#define MAD_16(x, y)    MAD_4(x, y);        MAD_4(x, y);        MAD_4(x, y);        MAD_4(x, y);
#define MAD_64(x, y)    MAD_16(x, y);       MAD_16(x, y);       MAD_16(x, y);       MAD_16(x, y);


void main() {
    const uint gid = gl_GlobalInvocationID.x;

#if 0
    uint temp_a = a[gid];
    uint temp_b = b[gid];

    const uint mask0 = uint(0x000000FF);
    const uint mask1 = uint(0x0000FF00);
    const uint mask2 = uint(0x00FF0000);
    const uint mask3 = uint(0xFF000000);

    uint temp_c;
    temp_c  = ((temp_a & mask0) + (temp_b & mask0)) & mask0;
    temp_c |= ((temp_a & mask1) + (temp_b & mask1)) & mask1;
    temp_c |= ((temp_a & mask2) + (temp_b & mask2)) & mask2;
    temp_c |= ((temp_a & mask3) + (temp_b & mask3)) & mask3;

    c[gid] = temp_c;
#else
    vec4 temp_a = {gl_LocalInvocationID.x, gl_LocalInvocationID.x+1, gl_LocalInvocationID.x+2, gl_LocalInvocationID.x+3};
    vec4 temp_0 = {gid, gid+1, gid+2, gid+3};

    // vec4 x 1024 = 4096 times
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);
    MAD_64(temp_a, temp_0);

    float temp_c = temp_0.x + temp_0.y + temp_0.z + temp_0.w + temp_a.x + temp_a.y + temp_a.z + temp_a.w;
    c[gid] = uint(temp_c);
#endif
}
